
mixin subheaders(values)
	.grid.grid-flow-col.gap-2.mb-2.border-bottom.subheaders
		.grid.grid-flow-col.gap-2.custom-grid
			each val in values
					h3(data-i18n=val)

mixin title(name)
	.grid.gap-2.items-center.justify-center.title
		h2.px-2.text-center(data-i18n=name)

mixin repeatingChatButton(name)
	button.text-left.ellipsis(name=`roll_${dashedName(name)}` type='roll' value!=`&{template:rolls} {{header=@{name}}} {{dice=@{description}}}`)
			span(name='attr_name')

//- p lowercase = pencil
mixin editToggle(name)
	- const attr = name ? `toggle_edit_${attrName(name)}` : 'toggle_edit'
	input.toggle.toggle-edit(name=`attr_${attr}` title=`edit toggle` type='checkbox' value='true' checked)
	span.pictos p

mixin collapseToggle(name)
	- const attr = name ? `toggle_collapse_${attrName(name)}` : 'toggle_collapse'
	input.toggle.toggle-collapse(name=`attr_${attr}` title=`collapse toggle` type='checkbox' value='true')
	span ^

mixin repeatingSection(name, values)
	.grid.gap-2.content-start.relative(class=dashedName(name))
		+title(name)
		+subheaders(values.display)
	- const { display = [], collapse = [] } = values
	fieldset(class=`repeating_${dashedName(name)}`)
		.grid.gap-2.relative.repeating-grid
			.grid.grid-flow-col.gap-2.displayed.custom-grid
				+repeatingChatButton(attrName(name))
				//- Remove the name because it is the button above
				each val in display.filter((e) => e !== "name")
					span.display(name=`attr_${attrName(val)}`)
			+editToggle()
			+collapseToggle()
			.collapsible.grid.gap-2.pl-4
				each val in collapse
					.grid.gap-2.col-auto-fr.items-center
						h4(data-i18n=val)
						span(name=`attr_${attrName(val)}`)
				.description
					span.display(name='attr_description')
			.edit.grid.gap-2.pl-4
				.grid.gap-2.grid-flow-col.edit-grid
					each val in [...display, ...collapse]
						.grid.gap-2.col-auto-fr.items-center
							h4(data-i18n=val)
							+textInput(val)
				.description
					+textarea('description')